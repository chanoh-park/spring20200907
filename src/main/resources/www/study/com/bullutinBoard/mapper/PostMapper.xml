<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.study.com.bullutinBoard.mapper.PostMapper">

	<resultMap id="boardResultMap"
		type="www.study.com.bullutinBoard.model.BoardVO">
		<id property="id" column="id" />
		<result property="name" column="name" />
	</resultMap>

	<!-- association : 1:N에서 N쪽의 정보를 조회할 때 1쪽의 정보도 함께 읽을 것임 -->
	
	<resultMap id="replyResultMap"
		type="www.study.com.bullutinBoard.model.ReplyVO">
		<id property="id" column="id" />
		<result property="content" column="content" />
		
		<!-- 다른 Mapper.xml에서 정의된 resultMap 활용 방법 -->
		<association property="writer" columnPrefix="m_" resultMap="www.study.com.party.mapper.PartyMapper.partyResultMap" />
		
		<!-- 구분자 -->
		<discriminator javaType="String" column="post_type">
			<case value="POST" resultMap="postResultMap" />
		</discriminator>
	</resultMap>
	
	<resultMap id="postResultMap"
		type="www.study.com.bullutinBoard.model.PostVO" extends="replyResultMap">
		<result property="title" column="title" />
		<association property="board" resultMap="boardResultMap" />
	</resultMap>

	<select id="getAll" resultMap="replyResultMap">
		select p.*, m.id m_id, m.name m_name, m.birth_date m_birth_date, m.party_type m_party_type, m.gender m_gender, m.sales_tot m_sales_tot
		from t_post p
		left outer join t_party m on p.writer_id = m.id
	</select>
	
	<!-- Composite Pattern에 따른 개발 방법 -->
	<select id="getAllReply" resultMap="replyResultMap">
		select p.*, m.id m_id, m.name m_name, m.birth_date m_birth_date, m.party_type m_party_type, m.gender m_gender, m.sales_tot m_sales_tot
		from (
			 SELECT LEVEL, t_post.*
			 FROM t_post
			 START WITH id = -100
			 CONNECT BY PRIOR  id = parent_id
			 ) p
		left outer join t_party m on p.writer_id = m.id
	</select>

</mapper>